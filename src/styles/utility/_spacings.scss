@use '../export.scss' as *;
@use 'sass:map';

@mixin generate-spacing-class($size) {
  @if map.get($use-margin, all) {
    .m-#{$size} {
      margin: var(--#{$size});
    }
  }

  @if map.get($use-margin, top) {
    .mt-#{$size} {
      margin-top: var(--#{$size});
    }
  }

  @if map.get($use-margin, right) {
    .mr-#{$size} {
      margin-right: var(--#{$size});
    }
  }

  @if map.get($use-margin, bottom) {
    .mb-#{$size} {
      margin-bottom: var(--#{$size});
    }
  }

  @if map.get($use-margin, left) {
    .ml-#{$size} {
      margin-left: var(--#{$size});
    }
  }

  @if map.get($use-margin, x) {
    .mx-#{$size} {
      margin-left: var(--#{$size});
      margin-right: var(--#{$size});
    }
  }

  @if map.get($use-margin, y) {
    .my-#{$size} {
      margin-bottom: var(--#{$size});
      margin-top: var(--#{$size});
    }
  }

  @if map.get($use-padding, all) {
    .p-#{$size} {
      padding: var(--#{$size});
    }
  }

  @if map.get($use-padding, top) {
    .pt-#{$size} {
      padding-top: var(--#{$size});
    }
  }

  @if map.get($use-padding, right) {
    .pr-#{$size} {
      padding-right: var(--#{$size});
    }
  }

  @if map.get($use-padding, bottom) {
    .pb-#{$size} {
      padding-bottom: var(--#{$size});
    }
  }

  @if map.get($use-padding, left) {
    .pl-#{$size} {
      padding-left: var(--#{$size});
    }
  }

  @if map.get($use-padding, x) {
    .px-#{$size} {
      padding-left: var(--#{$size});
      padding-right: var(--#{$size});
    }
  }

  @if map.get($use-padding, y) {
    .py-#{$size} {
      padding-bottom: var(--#{$size});
      padding-top: var(--#{$size});
    }
  }
}

@include desktop {
  :root {
    @each $size, $values in $spacings {
      $value: map.get($values, desktop);

      --#{$size}: #{$value};
    }
  }

  @if $use-spacings-utility-classes {
    @each $size, $values in $spacings {
      $value: map.get($values, desktop);

      @include generate-spacing-class($size);
    }
  }
}

@include tablet {
  :root {
    @each $size, $values in $spacings {
      $value: map.get($values, tablet);

      --#{$size}: #{$value};
    }
  }

  @if $use-spacings-utility-classes {
    @each $size, $values in $spacings {
      $value: map.get($values, tablet);

      @include generate-spacing-class($size);
    }
  }
}

@include mobile {
  :root {
    @each $size, $values in $spacings {
      $value: map.get($values, mobile);

      --#{$size}: #{$value};
    }
  }

  @if $use-spacings-utility-classes {
    @each $size, $values in $spacings {
      $value: map.get($values, mobile);

      @include generate-spacing-class($size);
    }
  }
}
